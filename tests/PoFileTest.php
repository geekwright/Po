<?php
namespace Geekwright\Po;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-17 at 18:31:31.
 */
class PoFileTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PoFile
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PoFile;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geekwright\Po\PoFile::createKey
     * @todo   Implement testCreateKey().
     */
    public function testCreateKey()
    {
        // createKey($msgid, $msgctxt = null, $msgid_plural = null)

        $msgid = 'message';
        $msgctxt = 'context';
        $msgid_plural = 'plural';

        $key = PoFile::createKey($msgid);
        $expected = $msgid;
        $this->assertEquals($key, $expected);

        $key = PoFile::createKey($msgid, $msgctxt);
        $expected = $msgctxt . '|' . $msgid;
        $this->assertEquals($key, $expected);

        $key = PoFile::createKey($msgid, null, $msgid_plural);
        $expected = $msgid . '|' . $msgid_plural;
        $this->assertEquals($key, $expected);

        $key = PoFile::createKey($msgid, $msgctxt, $msgid_plural);
        $expected = $msgctxt . '|' . $msgid . '|' . $msgid_plural;
        $this->assertEquals($key, $expected);

        $key = $this->object->createKey($msgid, $msgctxt, $msgid_plural);
        $expected = PoFile::createKey($msgid, $msgctxt, $msgid_plural);
        $this->assertEquals($key, $expected);
    }

    /**
     * @covers Geekwright\Po\PoFile::createKeyFromEntry
     * @todo   Implement testCreateKeyFromEntry().
     */
    public function testCreateKeyFromEntry()
    {

        $msgid = 'message';
        $msgctxt = 'context';
        $msgid_plural = 'plural';

        $entry = new PoEntry();

        $entry->set(PoTokens::MESSAGE, $msgid);
        $key = $this->object->createKeyFromEntry($entry);
        $expected = PoFile::createKey($msgid);
        $this->assertEquals($key, $expected);

        $entry->set(PoTokens::CONTEXT, $msgctxt);
        $key = $this->object->createKeyFromEntry($entry);
        $expected = PoFile::createKey($msgid, $msgctxt);
        $this->assertEquals($key, $expected);

        $entry->set(PoTokens::PLURAL, $msgid_plural);
        $key = $this->object->createKeyFromEntry($entry);
        $expected = PoFile::createKey($msgid, $msgctxt, $msgid_plural);
        $this->assertEquals($key, $expected);
    }

    /**
     * @covers Geekwright\Po\PoFile::setHeaderEntry
     * @todo   Implement testSetHeaderEntry().
     */
    public function testSetHeaderEntry()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::getHeaderEntry
     * @todo   Implement testGetHeaderEntry().
     */
    public function testGetHeaderEntry()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::getEntries
     * @todo   Implement testGetEntries().
     */
    public function testGetEntries()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::setUnkeyedEntries
     * @todo   Implement testSetUnkeyedEntries().
     */
    public function testSetUnkeyedEntries()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::getUnkeyedEntries
     * @todo   Implement testGetUnkeyedEntries().
     */
    public function testGetUnkeyedEntries()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::addEntry
     * @todo   Implement testAddEntry().
     */
    public function testAddEntry()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::mergeEntry
     * @todo   Implement testMergeEntry().
     */
    public function testMergeEntry()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::findEntry
     * @todo   Implement testFindEntry().
     */
    public function testFindEntry()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::removeEntry
     * @todo   Implement testRemoveEntry().
     */
    public function testRemoveEntry()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::writePoFile
     * @todo   Implement testWritePoFile().
     */
    public function testWritePoFile()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::dumpString
     * @todo   Implement testDumpString().
     */
    public function testDumpString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::readPoFile
     * @todo   Implement testReadPoFile().
     */
    public function testReadPoFile()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Geekwright\Po\PoFile::parsePoSource
     * @todo   Implement testParsePoSource().
     */
    public function testParsePoSource()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
